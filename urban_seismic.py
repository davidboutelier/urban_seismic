# -*- coding: utf-8 -*-
"""
/***************************************************************************
 UrbanSeismic
                                 A QGIS plugin
 This plugin helps design seismic surveys in urban environments
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-01-14
        git sha              : $Format:%H$
        copyright            : (C) 2025 by David Boutelier
        email                : boutelier.david@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import QObject, QThread, pyqtSignal
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction

from qgis.core import (
    Qgis,
    QgsVectorLayer,
    QgsProject,
    QgsMapLayerProxyModel,
    QgsMessageLog
)

from qgis.gui import QgsFileWidget

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .urban_seismic_dialog import UrbanSeismicDialog
import os.path
import geopandas as gpd
import numpy as np
from shapely.geometry import LineString, MultiLineString, Point
import time


proj_dict = {}


class CMP(QObject):
    global proj_dict
    finished = pyqtSignal()
    countChanged = pyqtSignal(int)

    def run(self):
        sp_layer = proj_dict['sp_layer'] 
        rp_layer = proj_dict['rp_layer'] 
        cmp_offset = proj_dict['cmp_offset'] 
        cmp_file = proj_dict['cmp_file'] 
        cmp_proj = proj_dict['cmp_proj'] 
        load_cmp = proj_dict['load_cmp']

        sp_layer_crs = sp_layer.crs().authid()
        sp_features = sp_layer.getFeatures()
        sp_gdf = gpd.GeoDataFrame.from_features(sp_features, crs = sp_layer_crs)

        rp_layer_crs = rp_layer.crs().authid()
        rp_features = rp_layer.getFeatures()
        rp_gdf = gpd.GeoDataFrame.from_features(rp_features, crs = rp_layer_crs)

        n_pairs = len(sp_gdf) * len(rp_gdf)
        index = 0

        CMP_list = []

        for i in range(0, len(sp_gdf)):
            SP = sp_gdf['geometry'].iloc[i]
            for j in range(0, len(rp_gdf)):
                RP = rp_gdf['geometry'].iloc[j]
                distance = SP.distance(RP)
                if distance < cmp_offset:
                    this_CMP = Point(SP.x + 0.5*(RP.x - SP.x), SP.y + 0.5*(RP.y - SP.y))
                    CMP_list.append(this_CMP)
                    
                index = index +1
                percent = int(100 * index/n_pairs)
                self.countChanged.emit(percent)

        cmp_gdf = gpd.GeoDataFrame(geometry=CMP_list, crs = sp_layer_crs)
        cmp_gdf.to_file(cmp_file)
        
        if load_cmp:
            new_projected_points_layer = QgsVectorLayer(cmp_file, os.path.splitext(os.path.basename(cmp_file))[0], "ogr")
            QgsProject.instance().addMapLayer(new_projected_points_layer)



        self.finished.emit()

class Projector(QObject):
    global proj_dict
    finished = pyqtSignal()
    countChanged = pyqtSignal(int)


    def run(self):

        selected_point_layer = proj_dict['selected_point_layer']
        selected_point_layer_CRS = selected_point_layer.crs().authid()
        features = selected_point_layer.getFeatures()
        points_df = gpd.GeoDataFrame.from_features(features, crs=selected_point_layer_CRS)

        max_dist = proj_dict['max_dist']
        search_inc = proj_dict['search_inc'] 
        threshold = proj_dict['threshold'] 

        multiline = proj_dict['selected_multiline_layer']
        multiline_features = multiline.getFeatures()
        multiline_crs = multiline.crs().authid()
        multiline_df = gpd.GeoDataFrame.from_features(multiline_features, crs=multiline_crs)
        this_multiline = multiline_df.geometry

        outfile = proj_dict['outfile'] 
        outfile_proj = proj_dict['proj_projected_points'] 
        load_projected = proj_dict['load_points']

        n_steps = int(max_dist/search_inc)

        points = []
        labels = []
        distances = []

        points_df['angle'].iloc[-1] = points_df['angle'].iloc[-2] # last point orientation is undefined. Use the previous one

        for i in range(0,len(points_df)):

            this_point = points_df['geometry'].iloc[i]
            this_label = points_df['Name'].iloc[i]
            this_bearing = points_df['angle'].iloc[i] + np.pi/2
            x0 = this_point.x
            y0 = this_point.y

            FIRST_POINT = False
            SECOND_POINT = False

            incx = search_inc * np.cos(this_bearing)
            incy = search_inc * np.sin(this_bearing)

            for j in range(0,n_steps):
                if not FIRST_POINT:
                    newx = x0 + j*incx
                    newy = y0 + j*incy
                    new_point = Point(newx,newy)

                    for k in range(0,len(multiline_df)):
                        if not FIRST_POINT:
                            this_new_line = this_multiline[k]
                            dist = this_new_line.distance(new_point)
                            if dist < threshold:
                                FIRST_POINT = True
                                FirstPoint = new_point
                                FirstPoint_dist = abs(this_point.distance(new_point))

            incx = search_inc * np.cos(this_bearing + np.pi)
            incy = search_inc * np.sin(this_bearing + np.pi)

            for j in range(0,n_steps):
                if not SECOND_POINT:
                    newx = x0 + j*incx
                    newy = y0 + j*incy
                    new_point = Point(newx,newy)

                    for k in range(0,len(multiline_df)):
                        if not SECOND_POINT:
                            this_new_line = this_multiline[k]
                            dist = this_new_line.distance(new_point)
                            if dist < threshold:
                                SECOND_POINT = True
                                SecondPoint = new_point
                                SecondPoint_dist = abs(this_point.distance(new_point))

            if FIRST_POINT:
                if SECOND_POINT:
                    if SecondPoint_dist < FirstPoint_dist:
                        points.append(SecondPoint)
                        labels.append(this_label)
                        distances.append(SecondPoint_dist)
                    else:
                        points.append(FirstPoint)
                        labels.append(this_label)
                        distances.append(FirstPoint_dist)
                else:
                    points.append(FirstPoint)
                    labels.append(this_label)
                    distances.append(FirstPoint_dist)
            else:
                if SECOND_POINT:
                    points.append(SecondPoint)
                    labels.append(this_label)
                    distances.append(SecondPoint_dist)

            percent = int(100 * (i+1) / len(points_df))
            self.countChanged.emit(percent)
        

        d = {'Name': labels, 'Distance': distances, 'geometry': points}
        projected_points = gpd.GeoDataFrame(d, crs=multiline_crs)

        outfile_crs = outfile_proj.authid()

        if multiline_crs != outfile_proj:
            projected_points = projected_points.to_crs(outfile_crs)

        projected_points.to_file(outfile)

        if load_projected:
            new_projected_points_layer = QgsVectorLayer(outfile, os.path.splitext(os.path.basename(outfile))[0], "ogr")
            QgsProject.instance().addMapLayer(new_projected_points_layer)

             
        self.finished.emit()



class UrbanSeismic:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'UrbanSeismic_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Urban Seismic')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('UrbanSeismic', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/urban_seismic/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'2D urban seismic'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Urban Seismic'),
                action)
            self.iface.removeToolBarIcon(action)

    def place_points(self):
        # Select a line layer, get its crs and convert to geopandas
        selected_layer = self.dlg.mMapLayerComboBox.currentLayer()
        selected_layer_CRS = selected_layer.crs().authid()
        features = selected_layer.getFeatures()
        df = gpd.GeoDataFrame.from_features(features, crs = selected_layer_CRS)

        # collect other parameters from dialog
        start_number = float(self.dlg.start_number_spinBox.text())        # start number for labelling  

        if start_number.is_integer():
            start_number = int(start_number) 

        increment = int(self.dlg.increment_spinBox.text())              # increment for labelling
        spacing = float(self.dlg.point_spacing_doubleSpinBox.text())    # point spacing
        shift = float(self.dlg.shift_doubleSpinBox.text())              # inline shift from start of the line
        file_out = self.dlg.mQgsFileWidget.filePath()                   # note: the file path includes the name of the file itself - not just the location to the file
        file_out_proj = self.dlg.mQgsProjectionSelectionWidget.crs()    # desired crs for output file
        load_points = self.dlg.load_checkBox.isChecked()
        
        multiline = df["geometry"][0]
        for line in multiline.geoms:
            xy = np.asarray(line.coords.xy).T
            n_points = xy.shape[0]
                
            left = 0    # leftover after placing points on segment
            x_points = []    
            y_points = []
            thetas = []         # angle of segment (rad from x axis)
            for i in range(0,n_points-1):
                seg_len = np.sqrt(np.power((xy[i,0] - xy[i+1,0]),2) + np.power((xy[i,1] -xy[i+1,1]),2))
                theta = np.arctan2(xy[i+1,1] -xy[i,1], xy[i+1,0] -xy[i,0])
                    
                if i == 0:
                    x_points.append(xy[i,0] + shift * np.cos(theta))
                    y_points.append(xy[i,1] + shift * np.sin(theta))
                        
                if (seg_len + left) > spacing:
                    seg_n_points = int(np.floor((seg_len -shift +left) / spacing))
                    newleft = seg_len + left - seg_n_points * spacing
                        
                    for j in range(0,seg_n_points):
                            
                        if j == 0:
                            dx = (spacing + shift - left) * np.cos(theta)
                            dy = (spacing + shift - left) * np.sin(theta)
                        else:
                            dx = (spacing + shift - left) * np.cos(theta) + j * spacing * np.cos(theta)
                            dy = (spacing + shift - left) * np.sin(theta) + j * spacing * np.sin(theta)
                            
                        x_points.append(xy[i,0] + dx)
                        y_points.append(xy[i,1] + dy)
                        thetas.append(theta)
                    left = np.copy(newleft)
                        
                else:
                    left = left + seg_len
                            
        points = [Point(sx,sy) for sx,sy in zip(x_points,y_points)]
        thetas.append(0)
        npoints = len(points)
        labels = np.arange(start_number,start_number + npoints * increment,increment)
        d = {'Name': labels, 'angle': thetas,'geometry': points}
        new_df = gpd.GeoDataFrame(d)
        new_df.crs = df.crs
            
        # if the crs needs to be altered
        if new_df.crs != file_out_proj.authid():
            new_df = new_df.to_crs(file_out_proj.authid())      # project to new crs
            
        # save to file  
        new_df.to_file(file_out)
            
        # load in qgis if requested
        if load_points:
            new_points_layer = QgsVectorLayer(file_out, os.path.splitext(os.path.basename(file_out))[0], "ogr")
            QgsProject.instance().addMapLayer(new_points_layer)

    def project_points(self):
        global proj_dict
        proj_dict['selected_point_layer'] = self.dlg.points_layer_mMapLayerComboBox.currentLayer()
        proj_dict['selected_multiline_layer'] = self.dlg.multiline_layer_mMapLayerComboBox.currentLayer()
        proj_dict['max_dist'] = self.dlg.max_dist_doubleSpinBox.value()
        proj_dict['search_inc'] = self.dlg.inc_doubleSpinBox.value()
        proj_dict['threshold'] = self.dlg.threshold_doubleSpinBox.value()
        proj_dict['outfile'] = self.dlg.outfile_proj_points_mQgsFileWidget.filePath() 
        proj_dict['proj_projected_points'] = self.dlg.proj_points_proj_mQgsProjectionSelectionWidget.crs()
        proj_dict['load_points'] = self.dlg.load_proj_points_checkBox.isChecked()


        self.thread = QThread()
        self.projector = Projector()
        self.projector.moveToThread(self.thread)
        self.thread.started.connect(self.projector.run)
        self.projector.finished.connect(self.project_complete)
        self.thread.finished.connect(self.thread.deleteLater)
        self.projector.countChanged.connect(self.project_progress)
        self.thread.start()

    def project_progress(self,value):
        self.dlg.progressBar.setValue(value)

    def project_complete(self):
        self.thread.quit()
        time.sleep(1)
        self.projector.deleteLater()

    def cmp_calc(self):
        global proj_dict

        # get values from GUI and place them in global dictionary
        proj_dict['sp_layer'] = self.dlg.sp_cmp_mMapLayerComboBox.currentLayer()
        proj_dict['rp_layer'] = self.dlg.rp_cmp_mMapLayerComboBox.currentLayer()
        proj_dict['cmp_offset'] = self.dlg.cmp_offset_doubleSpinBox.value()
        proj_dict['cmp_file'] = self.dlg.cmp_file_mQgsFileWidget.filePath() 
        proj_dict['cmp_proj'] = self.dlg.cmp_file_proj_mQgsProjectionSelectionWidget.crs()
        proj_dict['load_cmp'] = self.dlg.cmp_load_checkBox.isChecked()

        self.thread = QThread()
        self.cmp = CMP()
        self.cmp.moveToThread(self.thread)
        self.thread.started.connect(self.cmp.run)
        self.cmp.finished.connect(self.cmp_complete)
        self.thread.finished.connect(self.thread.deleteLater)
        self.cmp.countChanged.connect(self.cmp_progress)
        self.thread.start()

    def cmp_progress(self,value):
        self.dlg.progressBar.setValue(value)

    def cmp_complete(self):
        self.thread.quit()
        time.sleep(1)
        self.cmp.deleteLater()

    def export_rp(self):
        global proj_dict
        proj_dict['rp_export_layer'] = self.dlg.rp_export_mMapLayerComboBox.currentLayer()
        proj_dict['rp_export_file'] = self.dlg.rp_export_file_mQgsFileWidget.filePath()
        proj_dict['rp_sensor_export'] = self.dlg.rp_spinBox.value()
        proj_dict['rp_code_export'] = self.dlg.rp_code_comboBox.currentText()
        proj_dict['rp_export_line'] = self.dlg.rp_line_export_spinBox.value()

        selected_layer = proj_dict['rp_export_layer']
        selected_layer_CRS = selected_layer.crs().authid()
        features = selected_layer.getFeatures()
        rp_export_df = gpd.GeoDataFrame.from_features(features, crs = selected_layer_CRS)

        print(rp_export_df.head())

        with open(proj_dict['rp_export_file'], 'w') as f:
            f.write('Line,Point,Index,Code,Eastings,Northings,Elevation' + '\n')
            for index, row in rp_export_df.iterrows():
                this_point = row['geometry']
                this_easting = str(this_point.x)
                this_northing = str(this_point.y)

                for sensor in range(1, proj_dict['rp_sensor_export']+1):    
                    f.write(str(proj_dict['rp_export_line']) + ',' + str(row['Name']) + ','+ str(sensor) + ','+  proj_dict['rp_code_export'] + ',' + this_easting +',' + this_northing + ',0'  +'\n')
                    percent  = (index+1)/len(rp_export_df) * 100
                    self.dlg.progressBar.setValue(int(percent))
            time.sleep(1)
            self.dlg.progressBar.setValue(0)
        

    def export_sp(self):
        global proj_dict
        proj_dict['sp_export_layer'] = self.dlg.sp_export_mMapLayerComboBox.currentLayer()
        proj_dict['sp_export_file'] = self.dlg.sp_export_file_mQgsFileWidget.filePath()
        proj_dict['sp_shots_export'] = self.dlg.sp_shots_spinBox.value()
        proj_dict['sp_code_export'] = self.dlg.sp_code_comboBox.currentText()
        proj_dict['sp_export_line'] = self.dlg.sp_line_export_spinBox.value()

        selected_layer = proj_dict['sp_export_layer']
        selected_layer_CRS = selected_layer.crs().authid()
        features = selected_layer.getFeatures()
        sp_export_df = gpd.GeoDataFrame.from_features(features, crs = selected_layer_CRS)

        with open(proj_dict['sp_export_file'], 'w') as f:    
            f.write('Line,Point,Index,Code,Eastings,Northings,Elevation,Swath(optional)' + '\n')
            for index, row in sp_export_df.iterrows():
                this_point = row['geometry']
                this_easting = str(this_point.x)
                this_northing = str(this_point.y)
                for shot in range(1, proj_dict['sp_shots_export']+1):
                    f.write(str(proj_dict['sp_export_line']) + ',' + str(row['Name']) + ','+ str(shot) + ','+  proj_dict['sp_code_export'] + ',' + this_easting +',' + this_northing + ',0,1'  +'\n')
                    percent  = (index+1)/len(sp_export_df) * 100
                    self.dlg.progressBar.setValue(int(percent))
            time.sleep(1)
            self.dlg.progressBar.setValue(0)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = UrbanSeismicDialog()
            self.dlg.mMapLayerComboBox.setFilters(QgsMapLayerProxyModel.LineLayer)
            self.dlg.points_layer_mMapLayerComboBox.setFilters(QgsMapLayerProxyModel.PointLayer)
            self.dlg.multiline_layer_mMapLayerComboBox.setFilters(QgsMapLayerProxyModel.LineLayer)
            self.dlg.sp_cmp_mMapLayerComboBox.setFilters(QgsMapLayerProxyModel.PointLayer)
            self.dlg.rp_cmp_mMapLayerComboBox.setFilters(QgsMapLayerProxyModel.PointLayer)
            self.dlg.sp_export_mMapLayerComboBox.setFilters(QgsMapLayerProxyModel.PointLayer)
            self.dlg.rp_export_mMapLayerComboBox.setFilters(QgsMapLayerProxyModel.PointLayer)

        # create actions
        self.dlg.place_points_pushButton.clicked.connect(self.place_points)
        self.dlg.project_points_pushButton.clicked.connect(self.project_points) 
        self.dlg.cmp_calculate_pushButton.clicked.connect(self.cmp_calc) 
        self.dlg.rp_export_pushButton.clicked.connect(self.export_rp)
        self.dlg.sp_export_pushButton.clicked.connect(self.export_sp)

        # show the dialog
        self.dlg.show()
       
